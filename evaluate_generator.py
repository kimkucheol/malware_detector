import numpy as np
from keras.layers.convolutional import Conv2D
from keras.layers import MaxPooling2D, Activation
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers import Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras import backend as K
import tensorflow as tf
import keras
from keras.layers.normalization import BatchNormalization
from keras import optimizers
from keras.models import load_model

config = tf.ConfigProto()
#config.gpu_options.per_process_gpu_memory_fraction = 0.85
config.gpu_options.allow_growth = True
sess = tf.Session(config=config)
keras.backend.set_session(sess)

img_width, img_height = 224, 224

test_datagen= ImageDataGenerator(
    rescale=1. / 255
    )

test_generator = test_datagen.flow_from_directory(
    r'E:\KU-Android\train\KU-Android-pre-train\Test_Room_3\Test',
    shuffle = True,
    target_size=(img_width, img_height),
    color_mode='grayscale',
    class_mode='binary')

model = load_model(r'C:\Users\User\.PyCharmCE2017.3\config\scratches\tmp\secure_1019.h5')

print("--Evalute--")
scores = model.evaluate_generator(test_generator)
#scores = model.evaluate_generator(test_generator, steps = 5)
print("%s: %.2f%%" %(model.metrics_names[1], scores[1]*100))

#np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
#print(test_generator.class_indices)
#print(output)