import keras
import os
import PIL
import glob
import cv2
from keras.models import load_model
import keras.backend as K
from os import listdir
import numpy as np
import PIL.Image as pilimg
import numpy as np
from keras.models import Sequential
from keras.layers import Conv1D, BatchNormalization, Dense, Flatten
import matplotlib.pylab as plt
import pandas as pd
from keras import backend as K
from keras import optimizers

Train_path = r'C:\Users\User\Desktop\보안-\text-classification-tutorial-master\android_parsing\total_data.csv'

x_train = list()
y_train = list()

import csv
f = open(Train_path, 'r')
csvReader = csv.reader(f)

for row in csvReader:
    x_train.append(row[1])
    y_train.append(row[0])
f.close()

for i in range(len(y_train)):#문자열은 test를 못하니까, normal 이면 0으로, malware면 1로
    if y_train[i] == 'normal':
        y_train[i] = 0
    elif y_train[i] == 'malware':
        y_train[i] = 1
"""
from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer()
x_train = vectorizer.fit_transform(x_train)
x_train = x_train.toarray()
x_train = np.array(x_train)
"""
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.15, random_state=0) #(15% 테스트로)

#"""extracting Test Permission Data
import csv
f = open(r".\train_data.csv", "w", newline='')
wr = csv.writer(f)
for i in range(len(x_train)):
    if(y_train[i]) == 0:
        wr.writerow([r'normal', str(x_train[i])])
    else:
        wr.writerow([r'malware', str(x_train[i])])
   # wr.writerow(str(x_test[i]))
f.close()
#"""

true_positive = 0
true_negative = 0
false_positive = 0
false_negative = 0

x_test = x_test.reshape((-1, len(x_test[0]), 1))

##
nb_filters = 8
nb_kernels = 20
nb_strides = 1
model = Sequential()
#model.add(Conv1D(filters=nb_filters, kernel_size=nb_kernels, strides=nb_strides, activation='relu',input_shape=(len(x_train[0]),1), padding = 'same'))
model.add(Conv1D(filters=nb_filters, kernel_size=nb_kernels, strides=nb_strides, activation='relu',input_shape=(len(x_train[0]),1)))
model.add(BatchNormalization())
#model.add(Conv1D(filters=nb_filters*2, kernel_size=nb_kernels, strides=nb_strides, activation='relu', padding = 'same'))
model.add(Conv1D(filters=nb_filters*2, kernel_size=nb_kernels, strides=nb_strides, activation='relu'))
model.add(BatchNormalization())
#model.add(Conv1D(filters=nb_filters*4, kernel_size=nb_kernels, strides=nb_strides, activation='relu', padding = 'same'))
model.add(Conv1D(filters=nb_filters*4, kernel_size=nb_kernels, strides=nb_strides, activation='relu'))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(units=1000, activation='relu'))
model.add(Dense(units=500, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.summary()

SGD = optimizers.SGD(lr=0.001, decay = 0.005, momentum=0.9)
model.compile(loss='binary_crossentropy', optimizer='SGD', metrics=['accuracy'])

##
model = load_model(r'C:\Users\User\.PyCharmCE2017.3\config\scratches\tmp\permission_8_10_1_96.h5')

a = 0
b  =0
for i in range(len(y_test)):
    if y_test[i] ==0 :
        a+=1
    else:
        b+=1

threshold = 0.5
for i in range(len(x_test)):
    data = x_test[i].reshape((-1, len(x_test[i]), 1))
    result = model.predict(data)
    if result <= threshold:#0 is
        if(y_test[i] == 0) : #0 is benign
            true_negative+=1
        else:
            false_positive+=1
    if result > threshold : #1 malware
        if(y_test[i] == 0):
            false_negative +=1
        else: # 1 is malware
            true_positive +=1

print(true_negative)
print(true_positive)
print(false_negative)
print(false_positive)

predict = model.evaluate(x_test, y_test)
print(predict)

"""
extracting predict score
f = open(r".\1d_permission.txt", "w")
for i in range(len(x_test)):
    data = x_test[i].reshape((-1, len(x_test[i]), 1))
    result = model.predict(data)
    f.writelines(str(result[0][0]))
    f.writelines("\n")
f.close()
"""