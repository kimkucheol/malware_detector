import numpy as np
import os

from PIL import Image
from os import listdir

from extract_data_sector import extract_data
from extract_data_sector import pixel2img
from extract_data_sector import str2uint8
from extract_data_sector import get_data
from extract_data_sector import pixel2bin_img
from extract_data_sector import pixel2lc_img
#option
# 0 = 일반, 1 = black or white, 2 = Lossless compressioned gray image
option = 2

#dex 파일만 들고 올 수 있도록 후일 수정 바람, 안그러면 검은색 화면(다른 파일의 헤더를 잘못읽을수도있음)

dex_path = r"E:\KU-Android\train\KU-Android-pre-train\dex"
dex_folder = listdir(dex_path)

section_size = 0x68 #data
section_offset = 0x6c #data
#section_size = 0x60
#section_offset = 0x64

fixed_size = 50176 #224*224

for i in range(len(dex_folder)):
    count = 0
    dex_list = listdir(os.path.join(dex_path, dex_folder[i]))
    for j in range(len(dex_list)):
        f = open(os.path.join(dex_path, dex_folder[i], dex_list[j]), 'rb')

        data_size = extract_data(f, section_size)  # data section의 size를 가져옵니다
        data_off = extract_data(f, section_offset)  # data section의 offset을 가져옵니다.

        data = get_data(f, data_off, data_size, 'byte')  # offset으로부터 size만큼 가져옵니다.

        print("data_size = ", data_size)
        print("data_off = ", data_off)

        pixel = str2uint8(data)  # hex값을 int8형태로 가져옵니다.

        width = float(len(pixel) ** 0.5)
        width = int(width)
        ##
        if option is 0: # pixel -> img로 단순하게 바꿔줍니다. width * width을 넘어서는 잉여값은 제거합니다.
            img = pixel2img(pixel, width)
        elif option is 1:
            #임계값을 잡아줘야 하는데, 여기서는 최근접 이웃보간법이라서 임계값을 통계로 보고 잘라줘야합니다.
            #cpoint = 50#여기선 임의로 50으로 잡아줌
            cpoint = 1
            img = pixel2bin_img(pixel, width, cpoint)
        elif option is 2:
            cpoint = 1
            extra = width ** 2
            resize_ratio = extra / fixed_size
            if (resize_ratio > 1):
                img = pixel2lc_img(pixel, width)
            else :
                img = pixel2bin_img(pixel, width, cpoint)
        ##

        img.convert('RGB').save(os.path.join(dex_path, dex_folder[i], str(count) + ".jpg"))
        print(pixel)
        count += 1





