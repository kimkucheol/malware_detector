import numpy as np
import os
from keras.layers import Conv1D, BatchNormalization, Dense, Flatten
from keras.layers.convolutional import Conv2D
from keras.layers import MaxPooling2D, Activation
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers import Dense, ReLU
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras import backend as K
import tensorflow as tf
import keras
from keras.layers.normalization import BatchNormalization
from keras import optimizers

config = tf.ConfigProto()
#config.gpu_options.per_process_gpu_memory_fraction = 0.85
config.gpu_options.allow_growth = True
sess = tf.Session(config=config)
keras.backend.set_session(sess)

#Dropout 올려서 option1 다시 실험해 보기
option = 3
drop_rate = 0.4

img_width, img_height = 224, 224
epochs = 10000
batch_size = 16
nb_train_samples = 3602
nb_validation_samples = 1200


train_datagen = ImageDataGenerator(
    rescale=1. / 255
    )

val_datagen= ImageDataGenerator(
    rescale=1. / 255
    )

train_generator = train_datagen.flow_from_directory(
    r'E:\KU-Android\train\KU-Android-pre-train\Test_Room_6\Train',
    shuffle = True,
    target_size=(img_width, img_height),
    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='binary')

validation_generator = val_datagen.flow_from_directory(
    r'E:\KU-Android\train\KU-Android-pre-train\Test_Room_6\val',
    shuffle = True,
    target_size=(img_width, img_height),
    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='binary')

#"""
model = Sequential()

model.add(Conv2D(96, kernel_size=(3, 3), strides=(2, 2), input_shape=(224, 224, 1), padding='valid', activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))
if option == 1 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Conv2D(256, kernel_size=(3, 3), strides=(2, 2), padding='valid', activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))
if option == 1 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Conv2D(384, kernel_size=(3, 3), strides=(1, 1), padding='valid', activation='relu'))
model.add(BatchNormalization())
if option == 1 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Conv2D(384, kernel_size=(3, 3), strides=(1, 1), padding='valid', activation='relu'))
model.add(BatchNormalization())
if option == 1 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Conv2D(256, kernel_size=(3, 3), strides=(1, 1), padding='valid', activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))
if option == 2 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Flatten())
model.add(Dense(4096))
model.add(ReLU())
if option == 2 or option == 3:
    model.add(Dropout(drop_rate))

model.add(Dense(1000))
model.add(ReLU())

# output layer
model.add(Dense(1, activation='sigmoid'))

"""

nb_kernels = 10
nb_strides = 2

model = Sequential()
model.add(Conv1D(filters=16, kernel_size=nb_kernels, strides=nb_strides, activation='relu',
                 input_shape=(224,224)))
model.add(BatchNormalization())
model.add(Conv1D(filters=32, kernel_size=nb_kernels, strides=nb_strides, activation='relu'))
model.add(BatchNormalization())
model.add(Conv1D(filters=64, kernel_size=nb_kernels, strides=nb_strides, activation='relu'))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(units=500, activation='relu'))
model.add(Dense(units=500, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
#model = keras.applications.VGG16(include_top=True, weights=None, input_tensor=None, input_shape=(224, 224, 3), pooling='max', classes=1)
model.summary()
#load_weight
"""

#
#model.load_weights(r'C:\Users\User\.PyCharmCE2017.3\config\scratches\tmp\secure_1019.h5')
#


#Adam = optimizers.Adam(lr = 0.0005)
#model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])
SGD = optimizers.SGD(lr=0.001, decay = 0.005, momentum=0.9)
model.compile(loss='binary_crossentropy', optimizer='SGD', metrics=['accuracy'])


# this is the augmentation configuration we will use for training

from keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping

early_stopping = EarlyStopping(monitor='val_loss', patience=400, verbose=1, mode='auto')
tb_hist = keras.callbacks.TensorBoard(log_dir = r'C:\Users\User\.PyCharmCE2017.3\config\scratches\graph', histogram_freq = 0, write_graph = True, write_images = True)
checkpointer = ModelCheckpoint(filepath=r'C:\Users\User\.PyCharmCE2017.3\config\scratches\tmp\secure_1103.h5', monitor ='val_loss', verbose=1, save_best_only=True)
callback_list = [early_stopping, tb_hist, checkpointer]

model.fit_generator(
    train_generator,
    #steps_per_epoch = nb_train_samples // batch_size,
    validation_data = validation_generator,
    validation_steps = nb_validation_samples / batch_size,
    epochs=epochs,
    callbacks = callback_list)

# gramodel.save('secure_1017' + '.h5')
# this is the augmentation configuration we will use for testing:
# only rescaling

#output = model.predict_generator(validation_generator, steps = 5)
#np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
#print(validation_generator.class_indices)
#print(validation_generator.filenames)
#print(output)