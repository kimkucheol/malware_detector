import numpy as np
import os
import matplotlib.pyplot as plt

from PIL import Image
from os import listdir

from extract_data_sector import extract_data
from extract_data_sector import pixel2img
from extract_data_sector import str2uint8
from extract_data_sector import get_data
from extract_data_sector import pixel2bin_img

option = 0
dex_path = r"E:\KU-Android\train\KU-Android-pre-train\dex"
dex_folder = listdir(dex_path)

section_size = 0x68 #data
section_offset = 0x6c #data
#section_size = 0x60#Class Size
#section_offset = 0x64#Class Offset


box = [0 for i in range(256)]  # 1~255 data 빈도
box_m = [0 for i in range(256)] # 멀웨어의 빈도
box_n = [0 for i in range(256)] # 노말웨어의 빈도

pixel_average = []  # 한 프로그램의 1~255 평균값
pixel_average_m = []  # 멀웨어의 평균값
pixel_average_n = []  # 노말웨어의 평균값

pixel_ratio_m = [0 for i in range(256)]  # 빈도가 차지하는 비율
pixel_ratio_n = [0 for i in range(256)]
pixel_brightness = [i for i in range(256)]  # 그래프 그릴때 필요한 단순히 밝기의 배열

for i in range(len(dex_folder)):
    pixel_num = 0  # 멀,노말웨어의 픽셀의 빈도수 저장
    count = 0
    dex_list = listdir(os.path.join(dex_path, dex_folder[i]))
    for j in range(len(dex_list)):
        f = open(os.path.join(dex_path, dex_folder[i], dex_list[j]), 'rb')

        data_size = extract_data(f, section_size)  # data section의 size를 가져옵니다
        data_off = extract_data(f, section_offset)  # data section의 offset을 가져옵니다.

        data = get_data(f, data_off, data_size, 'byte')  # offset으로부터 size만큼 가져옵니다.

        print("data_size = ", data_size)
        print("data_off = ", data_off)

        pixel = str2uint8(data)  # hex값을 int8형태로 가져옵니다.

        for k in range(len(pixel)):  # pixel의 0~255 사이 값의 빈도와 평균값 구하기
            box[pixel[k]] += 1  # 빈도 측정
            pixel_num += pixel[k]
            count += 1
        pixel_num = pixel_num // len(pixel)  # 평균 구하기
        pixel_average.append(int(pixel_num))
        print("평균 = ", pixel_num)
        print("빈도 ",box)

    if(i==0):  #멀웨의 빈도수, 평균을 복사후 값초기화
         box_m = box.copy()
         pixel_average_m = pixel_average
         box = [0 for i in range(256)]
         pixel_average = []
    elif(i==1):  #노말웨어의 빈도수, 평균을 복사
         box_n = box.copy()
         pixel_average_n = pixel_average


for i in range(len(box)):  # 픽셀의 0~255 각각이 차지하는 비율 구하기
    pixel_ratio_m[i] = box_m[i]/sum(box_m)*100.0
    pixel_ratio_n[i] = box_n[i]/sum(box_n)*100.0



x = pixel_brightness  # 밝기마다의 비율 구하는 그래프 멀웨어는 red 노말웨어는 blue
y = pixel_ratio_m
plt.plot(x, y ,'r')
x = pixel_brightness
y = pixel_ratio_n
plt.plot(x, y ,'b')
plt.axis([0,255,0,30])
plt.xlabel('Brightness')
plt.ylabel('Ratio')
plt.title('Dex Brightness Ratio')
plt.show()





for i in range(256):  # 멀,노말 웨어의 평균값의 빈도 구하는 그래프
    y = pixel_average_m.count(i)
    if(y != 0):
        plt.plot(i, y, 'ro')
for i in range(256):
    y = pixel_average_n.count(i)
    if (y != 0):
        plt.plot(i, y, 'bo')
plt.axis([0,255,0,100])  # 100개로 했을때 y = 100 / 4000개, 2000개 테스트 할때는 [0,255,0,4000]으로 변경 필요
plt.xlabel('0~255 Average')
plt.ylabel('File Frequence')
plt.title('Dex Brightness Average')
plt.show()




pixel_avg_m = sum(pixel_average_m)/len(pixel_average_m)  # 멀,노말 웨어의 평균값의 비율 구하는 그래프
y= pixel_avg_m
plt.plot(1,y,'ro')
pixel_avg_n = sum(pixel_average_n)/len(pixel_average_n)
y= pixel_avg_n
plt.plot(2,y,'bo')
plt.axis([0,3,0,255])
plt.xlabel('1 : Malware  2 : Nomalware')
plt.ylabel('0~255 Average Of Average')
plt.title('Dex Brightness Average Of Average')
plt.show()





